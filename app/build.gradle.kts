/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  `java-library`
  `maven-publish`
}

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

sourceSets {
  create("jmh") {
    compileClasspath += sourceSets.main.get().output
    runtimeClasspath += sourceSets.main.get().output
  }
}
val jmhImplementation: Configuration by configurations.getting {
  extendsFrom(configurations.implementation.get())
}
val jmhAnnotationProcessor: Configuration by configurations.getting

dependencies {
  // Use JUnit Jupiter for testing.
  testImplementation(libs.junit)
  jmhImplementation(libs.jmhCore)
  jmhImplementation(libs.jmhAnnProcess)
  jmhAnnotationProcessor(libs.jmhAnnProcess)
}

tasks.named<Test>("test") {
  // Use JUnit Platform for unit tests.
  useJUnitPlatform()
}

tasks.create<JavaExec>("jmh") {
  description = "Executes JMH performance tests for ${project.name}."
  mainClass.set("org.openjdk.jmh.Main")

  // Setting the classpath like this implicitly creates task dependencies on the 'classes' and 'jmhClasses' tasks.
  classpath = sourceSets["jmh"].runtimeClasspath

  // The results of the full run are stored in build/reports/jmh/result.json
  val resultFile = file(project.buildDir.path + "/reports/jmh/result.txt")
  setArgsString("-rf text -rff " + resultFile.absolutePath)

  doFirst {
    // make sure build/reports/jmh directory exists
    resultFile.parentFile.mkdirs()
  }
}

tasks.withType<JavaCompile>() {
  options.encoding = "UTF-8"
  options.compilerArgs.add("-Xlint:unchecked")
  options.compilerArgs.add("-Xlint:deprecation")
  if (this.name != "compileJmhJava") {
    // JMH uses annotation processing to make your @Benchmark annotated methods into full-fledged performance tests.
    // So, we disable annotation processing only for non-JMH compile tasks.
    options.compilerArgs.add("-proc:none")
  }
}